
Technologies to be used:
 

 focus: 
	 AKF Scale cube-- (microservices (dedicated databases)-> Shards (divide the database) -> replicas of Shards) ? HOW?

 	 Deployment platform (AWS)	
	 EKS/google kubernates/without kubernates only simple docker images
	 API Gateway OR Application load balancer
	 Database: MongoDB Cluster /(MYSQL?)
	 Backend API clusters: GOlang  /deployed on Ec2 
	 Frontend :React.js / Deployed on Heroku
	 Authentication: jwt-token/ firebase
	 caching db: Redis (further research)
	 Messaging Queue: KAFKA (further research)

	How to handle search ? ->elastic search apis, common search on indexes? ,what to search?
######################################################################################################################################################
5 services: 
		1. Authentication
		2. profile	
		3. property
		4. payment			
		5. Booking


####################################################################################################################################################



Schema Requirement:
--------------------------------------------------------------------------------------------------------------------------------------------------
User: //Authenctiation is handled by 2 ways. email and pwd info should be stored in Mysql if not using Auth mechanism and then authenticate and store in mongo as well.
	{
	userId (UUID/Autogenerated),
	email (String)
	firstName (String)
	lastName (String)
	password (String)
	birthdate (Date)

	}
----------------------------------------------------------------------------------------------------------------------------------------------------
Profile:
	{
	profileId (UUID/Autogenerated),
	userId (String/rereference from user object),
	photo (String)
	gender (String)
	Phone (Integer)
	work  (String)
	city  (String)
	languages (String)	
	
	}
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Property:
	{
	
PropertyId    string      
Username      string      
UserId        string      
Title         string      
Description   string      
StreetAddr    string      
City          string      
Country       string      
ZipCode       string      
Bedrooms      string      
Bathrooms     string      
Accomodates   string      
Currency      string      
Price         string      
MinStay       string      
MaxStay       string      
StartDate     string      
EndDate       string      
PropertyType  PropertyType
Amenities     Amenities   
Spaces        Spaces      
Image         string      

}

PropertyType struct {
   PrivateBed      bool  
   Whole           bool  
   Shared          bool 
 }
 
 type Amenities struct {
        
        Ac      bool     
        Heater  bool     
        TV      bool     
        Wifi    bool     
}


type Spaces struct {
        
        Kitchen  bool  
        Closets  bool  
        Parking  bool  
        Gym      bool  
        Pool     bool  
        
}


------------------------------------------------------------------------------------------------------------------------------------------------------

Booking:

				{	bookingId(UUID/Autogenerated),
					propertyId (String),
					userId	(String),
					title (String),
					guests	(Integer),
					checkinTime (String), 
					chekoutTime (String),
					message (String), 
					amount  (Amount)
				}
----------------------------------------------------------------------------------------------------------------------------------------------------------------




###############################################################################################################################################################
API Contract:


Authentication API:

  Authentication via jwt tokens and simple email OR firebase Auth service OR Option:login via facbook/google/auth service


1. Signup

	Request URI: /signup
	Method: POST

	Request.body:
			{email
			firstName
			lastName
			password
			birthDate}

  // check for age :it should be more than 18 atleast (keeping this optional for now)

	Response: 
		{ /*user object */
			userId
			email
			firstName
			lastName
			password
			birthDate

		}

/*------------------------------------------------------------------------------------------------------------------------------------------------*/
2. login
	Request URI: /login:
	Method: POST

	1. login via email

	Request.body:
			email
			password

	Response:	
	{ /*user object +jwt token*/
			userId
			email
			firstName
			lastName
			password
			birthDate
			
			jwtToken

		}


//****************************************************************************************//
Profile API

3. Profile:

GET profile	
	Request URI: /profile/userId:
	Method: GET
	Response:
	 	{ /*user object/
				userId
				email
				firstName
				lastName
				password
				birthDate
			}
		photo: (String) //save in S3 bucket
		phone: (Integer)
		work:
		city:
		languages:
		gender:
/*----------------------------------------------------------------------------------*/

POST profile	
	Request URI: /profile/userId:
	Method: POST
 	Request:   { /*user object/
				userId
				email
				firstName
				lastName
				password
				birthDate
			}
		photo: (String) //save in S3 bucket
		phone: (Integer)
		work:
		city:
		languages:
		gender:

	Response: {Profile Object}

/*---------------------------------------------------------------------------------------*/
UPDATE profile:
	Request URI: /profile/userId:
	Method: PUT
	request.body{kev:value}
		
	response:{profile object}


//********************************************************************************************************************//	
Property API (Example)

4. Post a property
	Request URI: /property/addProperty:
	Method: POST

	request.body:

		{
        "Accomodates": "40",
        "Amenities": {
            "Ac": true,
            "Heater": true,
            "TV": true,
            "Wifi": true
        },
        "Bathrooms": "1",
        "Bedrooms": "1",
        "City": "San Jose",
        "Country": "USA",
        "Currency": "$",
        "Description": "OPEN",
        "EndDate": "19-9-2019",
        "MaxStay": "3",
        "MinStay": "2",
        "Price": "1000",
        "PropertyType": {
            "PrivateBed": false,
            "Shared": false,
            "Whole": false
        },
        "Spaces": {
            "Closets": false,
            "Gym": false,
            "Kitchen": false,
            "Parking": false,
            "Pool": false
        },
        "StartDate": "24-9-2019",
        "StreetAddr": "4388999",
        "Title": "New opening coming soon, yaaaaaayayayaayayya aaaaaaaaaaaaaaaaaaaaaaaaaaaas",
        "UserId": "10011",
        "Username": "Rohan",
        "ZipCode": "95050",
        "image": "download1.jpeg"
    }

	Response.json{message:Success,property :object}
/*-----------------------------------------------------------------------------------------------------------------------------------*/

GET property Details:

	Request URI: /property/{propertyId}:
	Method: GET

	Response:{property object}
	
	Request URI: /property1/{userId}:
	Method: GET

	Response:arrays of property objects
	



/*-----------------------------------------------------------------------------------------------------------------------------------*/

UPDATE Property:
	Request URI: /property/{propertyId):
	Method: PUT
	Reequest.body: 
			{
			propertyId,
			updatekey:value
				}
	Response:{property object}
/*---------------------------------------------------------------------------------------------------------------------------

DELETE Property
	Request URIL /property/{propertyId}
	Method: DELETE
	
	Response: Status 200 OK








/********************************************************************************************************************************************/

Booking API:


6. Booking:

POST new Booking:

	Request URI: /property/proprtyId/book:
	Method: POST
	

	reqeuset.body:		{
					propertyId
					userId
					title
					guests
					checkinTime
					chekoutTime
					message
					amount
				}
	   
	
	response.json:{ booking object,status}

/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
	
GET mybookings
	Request URI: /userId/mybookings:
	Method: Get

	response.json: {[array of {booking objects}]}



/*------------------------------------------------------------------------------------------------------------------------------------------------*/
Delete Booking
	Request URI: /userId/mybookings/remove:
	Method: DELETE
	
	request.body{bookingId:value}

	response.json: {[array of {booking objects}]}


/*************************************************************************************************************************************************/

