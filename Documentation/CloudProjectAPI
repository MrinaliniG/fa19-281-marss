
Technologies to be used:
 

 focus: 
	 AKF Scale cube-- (microservices (dedicated databases)-> Shards (divide the database) -> replicas of Shards) ? HOW?

 	 Deployment platform (AWS)	
	 EKS/google kubernates/without kubernates only simple docker images
	 API Gateway OR Application load balancer
	 Database: MongoDB Cluster /(MYSQL?)
	 Backend API clusters: GOlang  /deployed on Ec2 
	 Frontend :React.js / Deployed on Heroku
	 Authentication: jwt-token/ firebase
	 caching db: Redis (further research)
	 Messaging Queue: KAFKA (further research)

	How to handle search ? ->elastic search apis, common search on indexes? ,what to search?
######################################################################################################################################################
5 services: 
		1. Authentication
		2. profile	
		3. property
		4. payment			
		5. Booking


####################################################################################################################################################



Schema Requirement:
--------------------------------------------------------------------------------------------------------------------------------------------------
User: //Authenctiation is handled by 2 ways. email and pwd info should be stored in Mysql if not using Auth mechanism and then authenticate and store in mongo as well.
	{
	userId (UUID/Autogenerated),
	email (String)
	firstName (String)
	lastName (String)
	password (String)
	birthdate (Date)

	}
----------------------------------------------------------------------------------------------------------------------------------------------------
Profile:
	{
	profileId (UUID/Autogenerated),
	userId (String/rereference from user object),
	photo (String)
	gender (String)
	Phone (Integer)
	work  (String)
	city  (String)
	languages (String)	
	
	}
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Property:
	{	'PropertyId' : String,
    'Title' : String,
    'Description' : String,
    'Country' : String,
    'StreetAddress' :String,
    'City' : String,
    'State' : String,
    'ZipCode' : String,
    'PropertyType' :String,
    'Bedrooms' : Number,
    'Accomodates' :Number,
    'Bathrooms': Number,
    'Photos' : String,
    'Currency' : String,
    'Baserate' : String,
    'AvailabilityStartDate': Date,
    'AvailabilityEndDate': Date,
    'MinStay' : Number,
	'Ownername' : String,
	'UserId':String
	
		aminities: (array of Strings)[essentials,air conditioning,heat,closets,iron,Tv,wifi,breakfast]
				]

		spaces to use (array of strings):[kitchen,laundry-washer,parking,Gym,pool]



		photos:[array of Strings] save this in s3 bucket . save url in mongodb schema
 		
		}
--------------------------------------------------------------------------------------------------------------------------------------------------
Payment: //This should be handled by mysql database if possible. Nosql Databases are not secured enough to save confidential data.
		{
			paymentId,
			userId,
			firstname,
			lastname,
			cardnumber,
			expiry,
			cvv,
			zip,
			country
		}
------------------------------------------------------------------------------------------------------------------------------------------------------

Booking:

				{	bookingId(UUID/Autogenerated),
					propertyId (String),
					userId	(String),
					title (String),
					guests	(Integer),
					checkinTime (String), 
					chekoutTime (String),
					message (String), 
					amount  (Amount)
				}
----------------------------------------------------------------------------------------------------------------------------------------------------------------




###############################################################################################################################################################
API Contract:


Authentication API:

  Authentication via jwt tokens and simple email OR firebase Auth service OR Option:login via facbook/google/auth service


1. Signup

	Request URI: /signup
	Method: POST

	Request.body:
			{email
			firstName
			lastName
			password
			birthDate}

  // check for age :it should be more than 18 atleast (keeping this optional for now)

	Response: 
		{ /*user object */
			userId
			email
			firstName
			lastName
			password
			birthDate

		}

/*------------------------------------------------------------------------------------------------------------------------------------------------*/
2. login
	Request URI: /login:
	Method: POST

	1. login via email

	Request.body:
			email
			password

	Response:	
	{ /*user object +jwt token*/
			userId
			email
			firstName
			lastName
			password
			birthDate
			
			jwtToken

		}


//****************************************************************************************//
Profile API

3. Profile:

GET profile	
	Request URI: /profile/userId:
	Method: GET
	Response:
	 	{ /*user object/
				userId
				email
				firstName
				lastName
				password
				birthDate
			}
		photo: (String) //save in S3 bucket
		phone: (Integer)
		work:
		city:
		languages:
		gender:
/*----------------------------------------------------------------------------------*/

POST profile	
	Request URI: /profile/userId:
	Method: POST
 	Request:   { /*user object/
				userId
				email
				firstName
				lastName
				password
				birthDate
			}
		photo: (String) //save in S3 bucket
		phone: (Integer)
		work:
		city:
		languages:
		gender:

	Response: {Profile Object}

/*---------------------------------------------------------------------------------------*/
UPDATE profile:
	Request URI: /profile/userId:
	Method: PUT
	request.body{kev:value}
		
	response:{profile object}


//********************************************************************************************************************//	
Property API

4. Post a property
	Request URI: /property/addProperty:
	Method: POST

	request.body:

		userId:(String)
		Title:(String)
		isAvailable: (Boolean)
		type: (array of string)[whole,privateRoom,sharedRoom]
		guests:(Integer) upto 4
		location: city/state/country
		 service: 1. apartment
			  2. house
		description:(String)
		bedrooms:(Integer)
		bathrooms:(Integer)
		address: (json object)
			{
			 country
			 street
			 aptNo
			 city
			 state	
			 zipCode

			}
		checkinperiod:(integer) (max 7 days)
		checkinTime: (String)
		checkoutTime:(String)	
		Price: (Integer)
		Currency: (String)		
		aminities: (array of Strings)[essentials,air conditioning,heat,closets,iron,Tv,wifi,breakfast]
				]

		spaces to use (array of strings):[kitchen,laundry-washer,parking,Gym,pool]



		photos:[array of Strings] save this in s3 bucket . save url in mongodb schema


	Response.json{message:Success,property :object}
/*-----------------------------------------------------------------------------------------------------------------------------------*/

GET property Details:

	Request URI: /property/propertyId:
	Method: GET

	Response:{property object}



/*-----------------------------------------------------------------------------------------------------------------------------------*/

UPDATE Property:
	Request URI: /property/propertyId:
	Method: PUT
	Reequest.body: 
			{
			propertyId,
			updatekey:value
				}
	Response:{property object}





/**************************************************************************************************************************************/

Payment API:


5 .Payment methods:(array of objects): 

	Request URI: /payments/addPayment:
	Method: POST

	Request.body:
			{userId,
			firstname,
			lastname,
			cardnumber,
			expiry,
			cvv,
			zip,
			country}

	Response: {payment object}
/*----------------------------------------------------------------------------------------------------------------------------------------------*/
Get payment method details:

	Request URI: /payments:
	Method: GET

	Response:
		[array of {payment objects}]

/*---------------------------------------------------------------------------------------------------------------------------------------------*/

Delete payment method details:

	Request URI: /payments/removePayment:
	Method: Delete
	request.body{paymentId:value}
	Response:{message:value}


/********************************************************************************************************************************************/

Booking API:


6. Booking:

POST new Booking:

	Request URI: /property/proprtyId/book:
	Method: POST
	

	reqeuset.body:		{
					propertyId
					userId
					title
					guests
					checkinTime
					chekoutTime
					message
					amount
				}
	   
	
	response.json:{ booking object,status}

/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
	
GET mybookings
	Request URI: /userId/mybookings:
	Method: Get

	response.json: {[array of {booking objects}]}



/*------------------------------------------------------------------------------------------------------------------------------------------------*/
Delete Booking
	Request URI: /userId/mybookings/remove:
	Method: DELETE
	
	request.body{bookingId:value}

	response.json: {[array of {booking objects}]}


/*************************************************************************************************************************************************/

